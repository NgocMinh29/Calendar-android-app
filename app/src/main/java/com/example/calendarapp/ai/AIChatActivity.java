package com.example.calendarapp.ai;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.calendarapp.R;
import com.example.calendarapp.adapters.ChatMessageAdapter;
import com.example.calendarapp.models.ApiResponse;
import com.example.calendarapp.models.ChatConversation;
import com.example.calendarapp.models.ChatMessage;
import com.example.calendarapp.utils.SessionManager;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AIChatActivity extends AppCompatActivity implements GeminiAIManager.AIResponseCallback {
    private static final String TAG = "AIChatActivity";

    private RecyclerView rvChatMessages;
    private EditText etMessage;
    private ImageButton btnSend, btnBack;
    private TextView tvTitle;

    private ChatMessageAdapter adapter;
    private List<ChatMessage> messages;
    private GeminiAIManager aiManager;
    private SessionManager sessionManager;
    private ChatRepository chatRepository;

    private String currentConversationId;
    private String conversationTitle;
    private boolean isLoadingHistory = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ai_chat);

        sessionManager = new SessionManager(this);
        chatRepository = new ChatRepository(this);

        // Ki·ªÉm tra quy·ªÅn Premium
        if (!sessionManager.isPremium()) {
            Toast.makeText(this, "T√≠nh nƒÉng n√†y ch·ªâ d√†nh cho ng∆∞·ªùi d√πng Premium", Toast.LENGTH_LONG).show();
            finish();
            return;
        }

        initViews();
        setupChat();

        // Ki·ªÉm tra xem c√≥ conversation_id ƒë∆∞·ª£c truy·ªÅn v√†o kh√¥ng
        Intent intent = getIntent();
        boolean isNewChat = intent.getBooleanExtra("new_chat", false);

        if (intent != null && intent.hasExtra("conversation_id") && !isNewChat) {
            currentConversationId = intent.getStringExtra("conversation_id");
            conversationTitle = intent.getStringExtra("conversation_title");
            if (conversationTitle != null) {
                tvTitle.setText(conversationTitle);
            }
            loadChatHistory();
        } else if (isNewChat) {
            // THAY ƒê·ªîI: N·∫øu l√† cu·ªôc tr√≤ chuy·ªán m·ªõi, b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu
            startNewConversation();
        } else {
            // THAY ƒê·ªîI: T·ª± ƒë·ªông t·∫£i cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t thay v√¨ t·∫°o m·ªõi
            loadLatestConversation();
        }
    }

    private void initViews() {
        rvChatMessages = findViewById(R.id.rv_chat_messages);
        etMessage = findViewById(R.id.et_message);
        btnSend = findViewById(R.id.btn_send);
        btnBack = findViewById(R.id.btn_back);
        tvTitle = findViewById(R.id.tv_title);

        btnBack.setOnClickListener(v -> finish());
        btnSend.setOnClickListener(v -> sendMessage());

        // Thi·∫øt l·∫≠p title
        tvTitle.setText("ü§ñ Tr·ª£ l√Ω AI H·ªçc t·∫≠p");
    }

    private void setupChat() {
        messages = new ArrayList<>();
        adapter = new ChatMessageAdapter(this, messages);

        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        layoutManager.setStackFromEnd(true);
        rvChatMessages.setLayoutManager(layoutManager);
        rvChatMessages.setAdapter(adapter);

        aiManager = new GeminiAIManager(this);
    }

    // TH√äM M·ªöI: T·∫£i cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t
    private void loadLatestConversation() {
        chatRepository.getConversations(new ChatRepository.ConversationsCallback() {
            @Override
            public void onSuccess(List<ChatConversation> conversations) {
                runOnUiThread(() -> {
                    if (conversations != null && !conversations.isEmpty()) {
                        // L·∫•y cu·ªôc tr√≤ chuy·ªán g·∫ßn nh·∫•t (ƒë·∫ßu ti√™n trong danh s√°ch)
                        ChatConversation latestConversation = conversations.get(0);
                        currentConversationId = latestConversation.getId();
                        conversationTitle = latestConversation.getTitle();
                        tvTitle.setText(conversationTitle);

                        // T·∫£i tin nh·∫Øn c·ªßa cu·ªôc tr√≤ chuy·ªán n√†y
                        loadChatHistory();
                    } else {
                        // Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                        showWelcomeMessage();
                    }
                });
            }

            @Override
            public void onError(String error) {
                runOnUiThread(() -> {
                    // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                    showWelcomeMessage();
                });
            }
        });
    }

    private void loadChatHistory() {
        if (currentConversationId == null) {
            return;
        }

        isLoadingHistory = true;

        // Hi·ªÉn th·ªã loading message
        ChatMessage loadingMsg = new ChatMessage("ƒêang t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán...", ChatMessage.TYPE_SYSTEM);
        adapter.addMessage(loadingMsg);

        chatRepository.getChatMessages(currentConversationId, new ChatRepository.ChatMessagesCallback() {
            @Override
            public void onSuccess(List<ChatMessage> chatMessages) {
                runOnUiThread(() -> {
                    // X√≥a loading message
                    messages.clear();

                    // Th√™m tin nh·∫Øn t·ª´ l·ªãch s·ª≠
                    if (chatMessages != null && !chatMessages.isEmpty()) {
                        messages.addAll(chatMessages);
                        adapter.notifyDataSetChanged();
                        scrollToBottom();
                    } else {
                        // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                        showWelcomeMessage();
                    }

                    isLoadingHistory = false;
                });
            }

            @Override
            public void onError(String error) {
                runOnUiThread(() -> {
                    // X√≥a loading message
                    messages.clear();

                    // Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                    showWelcomeMessage();

                    isLoadingHistory = false;
                });
            }
        });
    }

    private void showWelcomeMessage() {
        String welcomeMessage = "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI h·ªçc t·∫≠p c·ªßa b·∫°n. üìö\n\n" +
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                "‚Ä¢ Gi·∫£i th√≠ch c√°c kh√°i ni·ªám h·ªçc thu·∫≠t\n" +
                "‚Ä¢ H∆∞·ªõng d·∫´n gi·∫£i b√†i t·∫≠p\n" +
                "‚Ä¢ T∆∞ v·∫•n ph∆∞∆°ng ph√°p h·ªçc t·∫≠p\n" +
                "‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ c√°c m√¥n h·ªçc\n\n" +
                "H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ";

        ChatMessage welcomeMsg = new ChatMessage(welcomeMessage, ChatMessage.TYPE_AI);
        adapter.addMessage(welcomeMsg);
        scrollToBottom();

        // CH·ªà l∆∞u tin nh·∫Øn ch√†o m·ª´ng khi KH√îNG ƒëang t·∫£i l·ªãch s·ª≠ v√† l√† cu·ªôc tr√≤ chuy·ªán m·ªõi
        if (!isLoadingHistory && currentConversationId == null) {
            saveMessageToDatabase(welcomeMsg, "Cu·ªôc tr√≤ chuy·ªán m·ªõi");
        }
    }

    private void sendMessage() {
        String messageText = etMessage.getText().toString().trim();
        if (TextUtils.isEmpty(messageText)) {
            return;
        }

        // Th√™m tin nh·∫Øn c·ªßa user
        ChatMessage userMessage = new ChatMessage(messageText, ChatMessage.TYPE_USER);
        if (currentConversationId != null) {
            userMessage.setConversationId(currentConversationId);
        }
        adapter.addMessage(userMessage);
        scrollToBottom();

        // X√≥a text trong EditText
        etMessage.setText("");

        // L∆∞u tin nh·∫Øn c·ªßa user v√†o CSDL
        saveMessageToDatabase(userMessage, messageText);

        // G·ª≠i tin nh·∫Øn ƒë·∫øn AI
        aiManager.sendMessage(messageText, this);
    }

    private void saveMessageToDatabase(ChatMessage message, String potentialTitle) {
        if (sessionManager.getUserEmail() == null) {
            return;
        }

        // N·∫øu l√† tin nh·∫Øn ƒë·∫ßu ti√™n v√† ch∆∞a c√≥ conversation_id, s·ª≠ d·ª•ng potentialTitle l√†m ti√™u ƒë·ªÅ
        String title = (currentConversationId == null && conversationTitle == null) ? potentialTitle : conversationTitle;

        chatRepository.saveMessage(message, title, new ChatRepository.SaveMessageCallback() {
            @Override
            public void onSuccess(ChatMessage savedMessage, String conversationId) {
                // C·∫≠p nh·∫≠t conversation_id n·∫øu ch∆∞a c√≥
                if (currentConversationId == null) {
                    currentConversationId = conversationId;
                    // C·∫≠p nh·∫≠t conversation_id cho t·∫•t c·∫£ tin nh·∫Øn trong adapter
                    for (ChatMessage msg : messages) {
                        msg.setConversationId(conversationId);
                    }
                }
            }

            @Override
            public void onError(String error) {
                // Log l·ªói nh∆∞ng kh√¥ng hi·ªÉn th·ªã cho user ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n tr√≤ chuy·ªán
                android.util.Log.e(TAG, "L·ªói khi l∆∞u tin nh·∫Øn: " + error);
            }
        });
    }

    @Override
    public void onTypingStart() {
        runOnUiThread(() -> {
            // Th√™m typing indicator
            ChatMessage typingMessage = new ChatMessage("AI ƒëang so·∫°n tin...", ChatMessage.TYPE_AI, true);
            adapter.addMessage(typingMessage);
            scrollToBottom();
        });
    }

    @Override
    public void onSuccess(String response) {
        runOnUiThread(() -> {
            // X√≥a typing indicator
            adapter.removeTypingMessage();

            // Th√™m ph·∫£n h·ªìi t·ª´ AI
            ChatMessage aiMessage = new ChatMessage(response, ChatMessage.TYPE_AI);
            if (currentConversationId != null) {
                aiMessage.setConversationId(currentConversationId);
            }
            adapter.addMessage(aiMessage);
            scrollToBottom();

            // L∆∞u ph·∫£n h·ªìi c·ªßa AI v√†o CSDL
            saveMessageToDatabase(aiMessage, null);
        });
    }

    @Override
    public void onError(String error) {
        runOnUiThread(() -> {
            // X√≥a typing indicator
            adapter.removeTypingMessage();

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            String errorMessage = "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.\n\nL·ªói: " + error;
            ChatMessage errorMsg = new ChatMessage(errorMessage, ChatMessage.TYPE_AI);
            adapter.addMessage(errorMsg);
            scrollToBottom();

            Toast.makeText(this, "L·ªói AI: " + error, Toast.LENGTH_SHORT).show();
        });
    }

    private void scrollToBottom() {
        if (adapter.getItemCount() > 0) {
            rvChatMessages.smoothScrollToPosition(adapter.getItemCount() - 1);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_ai_chat, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_clear_chat) {
            showClearChatDialog();
            return true;
        } else if (id == R.id.action_chat_history) {
            openChatHistory();
            return true;
        } else if (id == R.id.action_new_chat) {
            startNewChat();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void showClearChatDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("X√≥a l·ªãch s·ª≠ chat");
        builder.setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán n√†y kh√¥ng?");

        builder.setPositiveButton("X√≥a", (dialog, which) -> {
            clearCurrentChat();
        });

        builder.setNegativeButton("H·ªßy", null);
        builder.show();
    }

    private void clearCurrentChat() {
        if (currentConversationId != null) {
            chatRepository.deleteChatHistory(currentConversationId, new Callback<ApiResponse<String>>() {
                @Override
                public void onResponse(Call<ApiResponse<String>> call, Response<ApiResponse<String>> response) {
                    runOnUiThread(() -> {
                        // X√≥a tin nh·∫Øn tr√™n giao di·ªán
                        messages.clear();
                        adapter.notifyDataSetChanged();

                        // Reset conversation
                        currentConversationId = null;
                        conversationTitle = null;

                        // Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
                        showWelcomeMessage();

                        Toast.makeText(AIChatActivity.this, "ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán", Toast.LENGTH_SHORT).show();
                    });
                }

                @Override
                public void onFailure(Call<ApiResponse<String>> call, Throwable t) {
                    runOnUiThread(() -> {
                        Toast.makeText(AIChatActivity.this, "L·ªói khi x√≥a l·ªãch s·ª≠: " + t.getMessage(), Toast.LENGTH_SHORT).show();
                    });
                }
            });
        } else {
            // N·∫øu ch∆∞a c√≥ conversation_id, ch·ªâ x√≥a tr√™n giao di·ªán
            messages.clear();
            adapter.notifyDataSetChanged();
            showWelcomeMessage();
        }
    }

    private void openChatHistory() {
        Intent intent = new Intent(this, ConversationsActivity.class);
        startActivity(intent);
    }

    // THAY ƒê·ªîI: B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi
    private void startNewChat() {
        startNewConversation();
        Toast.makeText(this, "ƒê√£ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi", Toast.LENGTH_SHORT).show();
    }

    // TH√äM M·ªöI: B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán ho√†n to√†n m·ªõi
    private void startNewConversation() {
        // Reset t·∫•t c·∫£ th√¥ng tin cu·ªôc tr√≤ chuy·ªán
        currentConversationId = null;
        conversationTitle = null;

        // X√≥a tin nh·∫Øn tr√™n giao di·ªán
        messages.clear();
        adapter.notifyDataSetChanged();

        // Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng
        showWelcomeMessage();

        // Reset title
        tvTitle.setText("ü§ñ Tr·ª£ l√Ω AI H·ªçc t·∫≠p");

        android.util.Log.d(TAG, "Started new conversation");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (aiManager != null) {
            aiManager.cleanup();
        }
    }
}
